<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="774.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="757" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="757" > </text>
<g id="frames">
<g >
<title>std::_Destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt;*, std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt; &gt; (2 samples, 0.15%)</title><rect x="1187.4" y="549" width="1.7" height="15.0" fill="rgb(221,41,8)" rx="2" ry="2" />
<text  x="1190.39" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (11 samples, 0.81%)</title><rect x="564.3" y="325" width="9.6" height="15.0" fill="rgb(208,104,21)" rx="2" ry="2" />
<text  x="567.27" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;WasmEdge::AST::Instruction*&gt; (1 samples, 0.07%)</title><rect x="1186.5" y="117" width="0.9" height="15.0" fill="rgb(239,189,39)" rx="2" ry="2" />
<text  x="1189.51" y="127.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (12 samples, 0.89%)</title><rect x="534.6" y="341" width="10.5" height="15.0" fill="rgb(212,77,51)" rx="2" ry="2" />
<text  x="537.64" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt; &gt; &gt;::~vector (1 samples, 0.07%)</title><rect x="1186.5" y="565" width="0.9" height="15.0" fill="rgb(209,197,18)" rx="2" ry="2" />
<text  x="1189.51" y="575.5" ></text>
</g>
<g >
<title>WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="1185.6" y="645" width="0.9" height="15.0" fill="rgb(212,119,18)" rx="2" ry="2" />
<text  x="1188.64" y="655.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (1 samples, 0.07%)</title><rect x="1185.6" y="533" width="0.9" height="15.0" fill="rgb(211,128,10)" rx="2" ry="2" />
<text  x="1188.64" y="543.5" ></text>
</g>
<g >
<title>std::__invoke&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="517" width="1173.9" height="15.0" fill="rgb(243,188,5)" rx="2" ry="2" />
<text  x="14.74" y="527.5" >std::__invoke&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned ..</text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (26 samples, 1.92%)</title><rect x="909.4" y="309" width="22.6" height="15.0" fill="rgb(236,78,22)" rx="2" ry="2" />
<text  x="912.38" y="319.5" >c..</text>
</g>
<g >
<title>syscall (1 samples, 0.07%)</title><rect x="1185.6" y="517" width="0.9" height="15.0" fill="rgb(226,182,49)" rx="2" ry="2" />
<text  x="1188.64" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt; &gt; (1 samples, 0.07%)</title><rect x="1186.5" y="501" width="0.9" height="15.0" fill="rgb(226,98,51)" rx="2" ry="2" />
<text  x="1189.51" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::emplace_back&lt;WasmEdge::OpCode&amp;, unsigned long&amp;&gt; (5 samples, 0.37%)</title><rect x="23.1" y="293" width="4.3" height="15.0" fill="rgb(247,203,34)" rx="2" ry="2" />
<text  x="26.07" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::unsafeGetGlobal (2 samples, 0.15%)</title><rect x="457.9" y="325" width="1.8" height="15.0" fill="rgb(245,191,39)" rx="2" ry="2" />
<text  x="460.95" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (9 samples, 0.66%)</title><rect x="508.5" y="277" width="7.8" height="15.0" fill="rgb(227,46,46)" rx="2" ry="2" />
<text  x="511.49" y="287.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (3 samples, 0.22%)</title><rect x="478.0" y="181" width="2.6" height="15.0" fill="rgb(212,49,25)" rx="2" ry="2" />
<text  x="480.99" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::deallocate (1 samples, 0.07%)</title><rect x="24.8" y="245" width="0.9" height="15.0" fill="rgb(206,85,5)" rx="2" ry="2" />
<text  x="27.82" y="255.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::runWasmFile (1,347 samples, 99.48%)</title><rect x="11.7" y="485" width="1173.9" height="15.0" fill="rgb(218,45,18)" rx="2" ry="2" />
<text  x="14.74" y="495.5" >WasmEdge::VM::VM::runWasmFile</text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (1 samples, 0.07%)</title><rect x="871.9" y="245" width="0.9" height="15.0" fill="rgb(214,138,23)" rx="2" ry="2" />
<text  x="874.91" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (2 samples, 0.15%)</title><rect x="459.7" y="325" width="1.7" height="15.0" fill="rgb(246,88,12)" rx="2" ry="2" />
<text  x="462.69" y="335.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (1 samples, 0.07%)</title><rect x="524.2" y="341" width="0.9" height="15.0" fill="rgb(242,79,7)" rx="2" ry="2" />
<text  x="527.18" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main (4 samples, 0.30%)</title><rect x="1185.6" y="677" width="3.5" height="15.0" fill="rgb(244,179,45)" rx="2" ry="2" />
<text  x="1188.64" y="687.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::getTopN (20 samples, 1.48%)</title><rect x="556.4" y="341" width="17.5" height="15.0" fill="rgb(208,205,11)" rx="2" ry="2" />
<text  x="559.43" y="351.5" ></text>
</g>
<g >
<title>bprm_execve (1 samples, 0.07%)</title><rect x="10.0" y="629" width="0.9" height="15.0" fill="rgb(239,14,29)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (9 samples, 0.66%)</title><rect x="508.5" y="341" width="7.8" height="15.0" fill="rgb(207,0,1)" rx="2" ry="2" />
<text  x="511.49" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::__detail::__variant::__variant_cookie, std::__detail::__variant::_Variant_storage&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::_M_reset_impl (1 samples, 0.07%)</title><rect x="1186.5" y="213" width="0.9" height="15.0" fill="rgb(208,54,20)" rx="2" ry="2" />
<text  x="1189.51" y="223.5" ></text>
</g>
<g >
<title>__alloc_pages (2 samples, 0.15%)</title><rect x="476.2" y="197" width="1.8" height="15.0" fill="rgb(211,182,54)" rx="2" ry="2" />
<text  x="479.25" y="207.5" ></text>
</g>
<g >
<title>WasmEdge::AST::Instruction::getNum (6 samples, 0.44%)</title><rect x="484.1" y="357" width="5.2" height="15.0" fill="rgb(247,61,37)" rx="2" ry="2" />
<text  x="487.09" y="367.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.07%)</title><rect x="871.0" y="213" width="0.9" height="15.0" fill="rgb(214,104,20)" rx="2" ry="2" />
<text  x="874.03" y="223.5" ></text>
</g>
<g >
<title>irqentry_exit (1 samples, 0.07%)</title><rect x="22.2" y="245" width="0.9" height="15.0" fill="rgb(237,29,23)" rx="2" ry="2" />
<text  x="25.20" y="255.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (1 samples, 0.07%)</title><rect x="908.5" y="325" width="0.9" height="15.0" fill="rgb(211,221,12)" rx="2" ry="2" />
<text  x="911.51" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (1 samples, 0.07%)</title><rect x="872.8" y="245" width="0.8" height="15.0" fill="rgb(242,95,54)" rx="2" ry="2" />
<text  x="875.78" y="255.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="1185.6" y="613" width="0.9" height="15.0" fill="rgb(219,180,24)" rx="2" ry="2" />
<text  x="1188.64" y="623.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.07%)</title><rect x="871.0" y="245" width="0.9" height="15.0" fill="rgb(215,58,27)" rx="2" ry="2" />
<text  x="874.03" y="255.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runXorOp&lt;unsigned int&gt; (2 samples, 0.15%)</title><rect x="932.0" y="357" width="1.8" height="15.0" fill="rgb(217,8,28)" rx="2" ry="2" />
<text  x="935.04" y="367.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (1 samples, 0.07%)</title><rect x="871.9" y="341" width="0.9" height="15.0" fill="rgb(211,3,39)" rx="2" ry="2" />
<text  x="874.91" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="555.6" y="341" width="0.8" height="15.0" fill="rgb(210,209,31)" rx="2" ry="2" />
<text  x="558.55" y="351.5" ></text>
</g>
<g >
<title>begin_new_exec (1 samples, 0.07%)</title><rect x="10.0" y="581" width="0.9" height="15.0" fill="rgb(231,117,0)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (12 samples, 0.89%)</title><rect x="534.6" y="229" width="10.5" height="15.0" fill="rgb(205,113,17)" rx="2" ry="2" />
<text  x="537.64" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction&gt; (1 samples, 0.07%)</title><rect x="1186.5" y="181" width="0.9" height="15.0" fill="rgb(209,83,32)" rx="2" ry="2" />
<text  x="1189.51" y="191.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="293" width="5.2" height="15.0" fill="rgb(218,204,17)" rx="2" ry="2" />
<text  x="487.09" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runNeOp&lt;unsigned int&gt; (1 samples, 0.07%)</title><rect x="872.8" y="357" width="0.8" height="15.0" fill="rgb(205,221,40)" rx="2" ry="2" />
<text  x="875.78" y="367.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.15%)</title><rect x="1187.4" y="197" width="1.7" height="15.0" fill="rgb(253,13,40)" rx="2" ry="2" />
<text  x="1190.39" y="207.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.07%)</title><rect x="1188.3" y="181" width="0.8" height="15.0" fill="rgb(217,86,44)" rx="2" ry="2" />
<text  x="1191.26" y="191.5" ></text>
</g>
<g >
<title>cxx20::span&lt;WasmEdge::Validator::VType const, 18446744073709551615ul&gt;::end (1 samples, 0.07%)</title><rect x="1182.2" y="293" width="0.8" height="15.0" fill="rgb(222,228,42)" rx="2" ry="2" />
<text  x="1185.16" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLocalTeeOp (23 samples, 1.70%)</title><rect x="851.9" y="357" width="20.0" height="15.0" fill="rgb(249,137,13)" rx="2" ry="2" />
<text  x="854.86" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (5 samples, 0.37%)</title><rect x="530.3" y="341" width="4.3" height="15.0" fill="rgb(241,211,39)" rx="2" ry="2" />
<text  x="533.28" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="1185.6" y="501" width="0.9" height="15.0" fill="rgb(235,107,53)" rx="2" ry="2" />
<text  x="1188.64" y="511.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (1 samples, 0.07%)</title><rect x="22.2" y="261" width="0.9" height="15.0" fill="rgb(249,26,46)" rx="2" ry="2" />
<text  x="25.20" y="271.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (1 samples, 0.07%)</title><rect x="552.1" y="341" width="0.8" height="15.0" fill="rgb(241,119,20)" rx="2" ry="2" />
<text  x="555.07" y="351.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (1 samples, 0.07%)</title><rect x="524.2" y="229" width="0.9" height="15.0" fill="rgb(239,179,34)" rx="2" ry="2" />
<text  x="527.18" y="239.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="245" width="5.2" height="15.0" fill="rgb(241,73,3)" rx="2" ry="2" />
<text  x="487.09" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (124 samples, 9.16%)</title><rect x="1073.2" y="325" width="108.1" height="15.0" fill="rgb(240,114,44)" rx="2" ry="2" />
<text  x="1076.22" y="335.5" >std::vector&lt;W..</text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (284 samples, 20.97%)</title><rect x="573.9" y="341" width="247.5" height="15.0" fill="rgb(209,99,38)" rx="2" ry="2" />
<text  x="576.86" y="351.5" >WasmEdge::Runtime::StackManager:..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.07%)</title><rect x="26.6" y="149" width="0.8" height="15.0" fill="rgb(234,106,37)" rx="2" ry="2" />
<text  x="29.56" y="159.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.15%)</title><rect x="1187.4" y="229" width="1.7" height="15.0" fill="rgb(211,76,51)" rx="2" ry="2" />
<text  x="1190.39" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt;::operator (2 samples, 0.15%)</title><rect x="1187.4" y="469" width="1.7" height="15.0" fill="rgb(231,129,48)" rx="2" ry="2" />
<text  x="1190.39" y="479.5" ></text>
</g>
<g >
<title>WasmEdge::AST::Instruction::getLabelList (2 samples, 0.15%)</title><rect x="428.3" y="341" width="1.8" height="15.0" fill="rgb(231,136,29)" rx="2" ry="2" />
<text  x="431.32" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::vector&lt;WasmEdge::Validator::VType, std::allocator&lt;WasmEdge::Validator::VType&gt; &gt;, std::vector&lt;WasmEdge::Validator::VType, std::allocator&lt;WasmEdge::Validator::VType&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::vector&lt;WasmEdge::Validator::VType, std::allocator&lt;WasmEdge::Validator::VType&gt; &gt;, std::vector&lt;WasmEdge::Validator::VType, std::allocator&lt;WasmEdge::Validator::VType&gt; &gt; &gt; &gt; &gt;::operator[] (1 samples, 0.07%)</title><rect x="1184.8" y="325" width="0.8" height="15.0" fill="rgb(214,214,48)" rx="2" ry="2" />
<text  x="1187.77" y="335.5" ></text>
</g>
<g >
<title>exc_page_fault (5 samples, 0.37%)</title><rect x="476.2" y="293" width="4.4" height="15.0" fill="rgb(245,152,8)" rx="2" ry="2" />
<text  x="479.25" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (9 samples, 0.66%)</title><rect x="508.5" y="309" width="7.8" height="15.0" fill="rgb(236,99,39)" rx="2" ry="2" />
<text  x="511.49" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadModule (19 samples, 1.40%)</title><rect x="11.7" y="437" width="16.6" height="15.0" fill="rgb(229,200,52)" rx="2" ry="2" />
<text  x="14.74" y="447.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runShrOp&lt;unsigned int&gt; (2 samples, 0.15%)</title><rect x="907.6" y="357" width="1.8" height="15.0" fill="rgb(213,2,24)" rx="2" ry="2" />
<text  x="910.64" y="367.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (1 samples, 0.07%)</title><rect x="1185.6" y="357" width="0.9" height="15.0" fill="rgb(251,165,53)" rx="2" ry="2" />
<text  x="1188.64" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="867.5" y="325" width="0.9" height="15.0" fill="rgb(227,91,17)" rx="2" ry="2" />
<text  x="870.55" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (9 samples, 0.66%)</title><rect x="508.5" y="293" width="7.8" height="15.0" fill="rgb(232,113,30)" rx="2" ry="2" />
<text  x="511.49" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::instantiate (1 samples, 0.07%)</title><rect x="28.3" y="421" width="0.9" height="15.0" fill="rgb(244,3,19)" rx="2" ry="2" />
<text  x="31.30" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.07%)</title><rect x="24.8" y="165" width="0.9" height="15.0" fill="rgb(241,133,3)" rx="2" ry="2" />
<text  x="27.82" y="175.5" ></text>
</g>
<g >
<title>std::apply&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="549" width="1173.9" height="15.0" fill="rgb(235,45,10)" rx="2" ry="2" />
<text  x="14.74" y="559.5" >std::apply&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned lon..</text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::unsafeGetGlobal (26 samples, 1.92%)</title><rect x="434.4" y="325" width="22.7" height="15.0" fill="rgb(234,228,27)" rx="2" ry="2" />
<text  x="437.42" y="335.5" >W..</text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (1 samples, 0.07%)</title><rect x="871.9" y="229" width="0.9" height="15.0" fill="rgb(211,205,23)" rx="2" ry="2" />
<text  x="874.91" y="239.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (1 samples, 0.07%)</title><rect x="871.9" y="293" width="0.9" height="15.0" fill="rgb(224,224,5)" rx="2" ry="2" />
<text  x="874.91" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (2 samples, 0.15%)</title><rect x="873.6" y="229" width="1.8" height="15.0" fill="rgb(243,54,5)" rx="2" ry="2" />
<text  x="876.65" y="239.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::instantiate (1 samples, 0.07%)</title><rect x="28.3" y="405" width="0.9" height="15.0" fill="rgb(254,160,20)" rx="2" ry="2" />
<text  x="31.30" y="415.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pop (1 samples, 0.07%)</title><rect x="851.0" y="341" width="0.9" height="15.0" fill="rgb(212,22,36)" rx="2" ry="2" />
<text  x="853.99" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::instantiateModule (1 samples, 0.07%)</title><rect x="28.3" y="437" width="0.9" height="15.0" fill="rgb(212,90,11)" rx="2" ry="2" />
<text  x="31.30" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::~_Move_ctor_base (1 samples, 0.07%)</title><rect x="1186.5" y="373" width="0.9" height="15.0" fill="rgb(237,183,53)" rx="2" ry="2" />
<text  x="1189.51" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;WasmEdge::AST::Instruction const*, WasmEdge::AST::Instruction*&gt; (2 samples, 0.15%)</title><rect x="25.7" y="213" width="1.7" height="15.0" fill="rgb(207,77,13)" rx="2" ry="2" />
<text  x="28.69" y="223.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.15%)</title><rect x="476.2" y="181" width="1.8" height="15.0" fill="rgb(231,187,11)" rx="2" ry="2" />
<text  x="479.25" y="191.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.07%)</title><rect x="1185.6" y="373" width="0.9" height="15.0" fill="rgb(224,67,24)" rx="2" ry="2" />
<text  x="1188.64" y="383.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runGlobalGetOp (28 samples, 2.07%)</title><rect x="433.5" y="357" width="24.4" height="15.0" fill="rgb(247,96,46)" rx="2" ry="2" />
<text  x="436.55" y="367.5" >W..</text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (26 samples, 1.92%)</title><rect x="909.4" y="229" width="22.6" height="15.0" fill="rgb(249,137,45)" rx="2" ry="2" />
<text  x="912.38" y="239.5" >c..</text>
</g>
<g >
<title>std::shared_mutex::lock_shared (1 samples, 0.07%)</title><rect x="432.7" y="309" width="0.8" height="15.0" fill="rgb(235,82,41)" rx="2" ry="2" />
<text  x="435.67" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.07%)</title><rect x="24.8" y="181" width="0.9" height="15.0" fill="rgb(232,116,48)" rx="2" ry="2" />
<text  x="27.82" y="191.5" ></text>
</g>
<g >
<title>operator (3 samples, 0.22%)</title><rect x="19.6" y="277" width="2.6" height="15.0" fill="rgb(227,168,45)" rx="2" ry="2" />
<text  x="22.59" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt;*&gt; (1 samples, 0.07%)</title><rect x="1186.5" y="517" width="0.9" height="15.0" fill="rgb(223,120,16)" rx="2" ry="2" />
<text  x="1189.51" y="527.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (1 samples, 0.07%)</title><rect x="552.1" y="277" width="0.8" height="15.0" fill="rgb(212,55,18)" rx="2" ry="2" />
<text  x="555.07" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="457.1" y="325" width="0.8" height="15.0" fill="rgb(248,108,10)" rx="2" ry="2" />
<text  x="460.08" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (22 samples, 1.62%)</title><rect x="489.3" y="293" width="19.2" height="15.0" fill="rgb(230,158,46)" rx="2" ry="2" />
<text  x="492.32" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (12 samples, 0.89%)</title><rect x="534.6" y="293" width="10.5" height="15.0" fill="rgb(207,119,54)" rx="2" ry="2" />
<text  x="537.64" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (1 samples, 0.07%)</title><rect x="524.2" y="245" width="0.9" height="15.0" fill="rgb(253,16,41)" rx="2" ry="2" />
<text  x="527.18" y="255.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runGtOp&lt;unsigned int&gt; (2 samples, 0.15%)</title><rect x="552.9" y="357" width="1.8" height="15.0" fill="rgb(235,3,43)" rx="2" ry="2" />
<text  x="555.94" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;WasmEdge::AST::Instruction*&gt; (1 samples, 0.07%)</title><rect x="1186.5" y="101" width="0.9" height="15.0" fill="rgb(230,157,45)" rx="2" ry="2" />
<text  x="1189.51" y="111.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1,347 samples, 99.48%)</title><rect x="11.7" y="661" width="1173.9" height="15.0" fill="rgb(248,78,1)" rx="2" ry="2" />
<text  x="14.74" y="671.5" >[libstdc++.so.6.0.28]</text>
</g>
<g >
<title>futex_wait (1 samples, 0.07%)</title><rect x="1185.6" y="437" width="0.9" height="15.0" fill="rgb(217,138,44)" rx="2" ry="2" />
<text  x="1188.64" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt;::~unique_ptr (2 samples, 0.15%)</title><rect x="1187.4" y="485" width="1.7" height="15.0" fill="rgb(208,139,16)" rx="2" ry="2" />
<text  x="1190.39" y="495.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrOp (177 samples, 13.07%)</title><rect x="231.4" y="325" width="154.2" height="15.0" fill="rgb(213,30,45)" rx="2" ry="2" />
<text  x="234.36" y="335.5" >WasmEdge::Executor:..</text>
</g>
<g >
<title>__GI___clone (1,348 samples, 99.56%)</title><rect x="10.9" y="693" width="1174.7" height="15.0" fill="rgb(254,211,2)" rx="2" ry="2" />
<text  x="13.87" y="703.5" >__GI___clone</text>
</g>
<g >
<title>std::_Vector_base&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::_Vector_base (1 samples, 0.07%)</title><rect x="27.4" y="277" width="0.9" height="15.0" fill="rgb(220,64,48)" rx="2" ry="2" />
<text  x="30.43" y="287.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::branchToLabel (2 samples, 0.15%)</title><rect x="426.6" y="341" width="1.7" height="15.0" fill="rgb(231,215,30)" rx="2" ry="2" />
<text  x="429.57" y="351.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.07%)</title><rect x="22.2" y="213" width="0.9" height="15.0" fill="rgb(225,192,6)" rx="2" ry="2" />
<text  x="25.20" y="223.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.07%)</title><rect x="1189.1" y="437" width="0.9" height="15.0" fill="rgb(220,109,53)" rx="2" ry="2" />
<text  x="1192.13" y="447.5" ></text>
</g>
<g >
<title>all (1,354 samples, 100%)</title><rect x="10.0" y="725" width="1180.0" height="15.0" fill="rgb(239,195,17)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.07%)</title><rect x="1188.3" y="149" width="0.8" height="15.0" fill="rgb(205,16,16)" rx="2" ry="2" />
<text  x="1191.26" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;WasmEdge::AST::Instruction&gt;::construct&lt;WasmEdge::AST::Instruction, WasmEdge::OpCode&amp;, unsigned long&amp;&gt; (2 samples, 0.15%)</title><rect x="23.1" y="261" width="1.7" height="15.0" fill="rgb(229,66,6)" rx="2" ry="2" />
<text  x="26.07" y="271.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (2 samples, 0.15%)</title><rect x="932.0" y="341" width="1.8" height="15.0" fill="rgb(215,108,25)" rx="2" ry="2" />
<text  x="935.04" y="351.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.07%)</title><rect x="1189.1" y="629" width="0.9" height="15.0" fill="rgb(237,115,10)" rx="2" ry="2" />
<text  x="1192.13" y="639.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::getTopN (4 samples, 0.30%)</title><rect x="868.4" y="341" width="3.5" height="15.0" fill="rgb(246,126,26)" rx="2" ry="2" />
<text  x="871.42" y="351.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (1 samples, 0.07%)</title><rect x="872.8" y="229" width="0.8" height="15.0" fill="rgb(228,0,11)" rx="2" ry="2" />
<text  x="875.78" y="239.5" ></text>
</g>
<g >
<title>lru_cache_add (3 samples, 0.22%)</title><rect x="478.0" y="197" width="2.6" height="15.0" fill="rgb(220,207,46)" rx="2" ry="2" />
<text  x="480.99" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::vector (1 samples, 0.07%)</title><rect x="27.4" y="293" width="0.9" height="15.0" fill="rgb(226,17,5)" rx="2" ry="2" />
<text  x="30.43" y="303.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.07%)</title><rect x="871.0" y="229" width="0.9" height="15.0" fill="rgb(209,4,17)" rx="2" ry="2" />
<text  x="874.03" y="239.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (1 samples, 0.07%)</title><rect x="908.5" y="261" width="0.9" height="15.0" fill="rgb(246,80,20)" rx="2" ry="2" />
<text  x="911.51" y="271.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (26 samples, 1.92%)</title><rect x="909.4" y="261" width="22.6" height="15.0" fill="rgb(240,190,46)" rx="2" ry="2" />
<text  x="912.38" y="271.5" >c..</text>
</g>
<g >
<title>std::__do_visit&lt;false, true, std::__detail::__variant::_Variant_storage&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::_M_reset_impl (1 samples, 0.07%)</title><rect x="1186.5" y="293" width="0.9" height="15.0" fill="rgb(215,104,3)" rx="2" ry="2" />
<text  x="1189.51" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (7 samples, 0.52%)</title><rect x="518.1" y="341" width="6.1" height="15.0" fill="rgb(250,162,2)" rx="2" ry="2" />
<text  x="521.08" y="351.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (2 samples, 0.15%)</title><rect x="873.6" y="309" width="1.8" height="15.0" fill="rgb(211,200,8)" rx="2" ry="2" />
<text  x="876.65" y="319.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (2 samples, 0.15%)</title><rect x="932.0" y="245" width="1.8" height="15.0" fill="rgb(244,158,21)" rx="2" ry="2" />
<text  x="935.04" y="255.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (12 samples, 0.89%)</title><rect x="534.6" y="261" width="10.5" height="15.0" fill="rgb(237,101,1)" rx="2" ry="2" />
<text  x="537.64" y="271.5" ></text>
</g>
<g >
<title>std::_Construct&lt;WasmEdge::AST::Instruction, WasmEdge::AST::Instruction const&amp;&gt; (2 samples, 0.15%)</title><rect x="25.7" y="197" width="1.7" height="15.0" fill="rgb(218,74,18)" rx="2" ry="2" />
<text  x="28.69" y="207.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (22 samples, 1.62%)</title><rect x="489.3" y="309" width="19.2" height="15.0" fill="rgb(215,227,42)" rx="2" ry="2" />
<text  x="492.32" y="319.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (37 samples, 2.73%)</title><rect x="875.4" y="293" width="32.2" height="15.0" fill="rgb(226,77,48)" rx="2" ry="2" />
<text  x="878.39" y="303.5" >cx..</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (2 samples, 0.15%)</title><rect x="459.7" y="309" width="1.7" height="15.0" fill="rgb(244,17,40)" rx="2" ry="2" />
<text  x="462.69" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;true, std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.07%)</title><rect x="1186.5" y="277" width="0.9" height="15.0" fill="rgb(233,123,51)" rx="2" ry="2" />
<text  x="1189.51" y="287.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.07%)</title><rect x="1185.6" y="389" width="0.9" height="15.0" fill="rgb(250,229,6)" rx="2" ry="2" />
<text  x="1188.64" y="399.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.15%)</title><rect x="1187.4" y="277" width="1.7" height="15.0" fill="rgb(205,31,29)" rx="2" ry="2" />
<text  x="1190.39" y="287.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.07%)</title><rect x="1189.1" y="501" width="0.9" height="15.0" fill="rgb(208,195,7)" rx="2" ry="2" />
<text  x="1192.13" y="511.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (1 samples, 0.07%)</title><rect x="10.9" y="629" width="0.8" height="15.0" fill="rgb(221,193,1)" rx="2" ry="2" />
<text  x="13.87" y="639.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::unsafeAddInstance&lt;WasmEdge::Runtime::Instance::FunctionInstance, WasmEdge::Runtime::Instance::ModuleInstance*, WasmEdge::AST::FunctionType const&amp;, cxx20::span&lt;std::pair&lt;unsigned int, WasmEdge::ValType&gt; const, 18446744073709551615ul&gt;, cxx20::span&lt;WasmEdge::AST::Instruction const, 18446744073709551615ul&gt; &gt; (1 samples, 0.07%)</title><rect x="28.3" y="373" width="0.9" height="15.0" fill="rgb(250,56,20)" rx="2" ry="2" />
<text  x="31.30" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (129 samples, 9.53%)</title><rect x="1068.9" y="341" width="112.4" height="15.0" fill="rgb(246,80,23)" rx="2" ry="2" />
<text  x="1071.86" y="351.5" >std::vector&lt;W..</text>
</g>
<g >
<title>perf-exec (1 samples, 0.07%)</title><rect x="10.0" y="709" width="0.9" height="15.0" fill="rgb(248,0,12)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.07%)</title><rect x="1189.1" y="597" width="0.9" height="15.0" fill="rgb(228,33,20)" rx="2" ry="2" />
<text  x="1192.13" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.07%)</title><rect x="1189.1" y="661" width="0.9" height="15.0" fill="rgb(218,183,54)" rx="2" ry="2" />
<text  x="1192.13" y="671.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (5 samples, 0.37%)</title><rect x="530.3" y="325" width="4.3" height="15.0" fill="rgb(233,71,37)" rx="2" ry="2" />
<text  x="533.28" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (1 samples, 0.07%)</title><rect x="552.1" y="325" width="0.8" height="15.0" fill="rgb(239,141,25)" rx="2" ry="2" />
<text  x="555.07" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (12 samples, 0.89%)</title><rect x="534.6" y="277" width="10.5" height="15.0" fill="rgb(221,101,38)" rx="2" ry="2" />
<text  x="537.64" y="287.5" ></text>
</g>
<g >
<title>WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="325" width="5.2" height="15.0" fill="rgb(205,7,11)" rx="2" ry="2" />
<text  x="487.09" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="309" width="5.2" height="15.0" fill="rgb(228,150,9)" rx="2" ry="2" />
<text  x="487.09" y="319.5" ></text>
</g>
<g >
<title>start_thread (1,347 samples, 99.48%)</title><rect x="11.7" y="677" width="1173.9" height="15.0" fill="rgb(230,27,47)" rx="2" ry="2" />
<text  x="14.74" y="687.5" >start_thread</text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.15%)</title><rect x="1187.4" y="341" width="1.7" height="15.0" fill="rgb(234,120,8)" rx="2" ry="2" />
<text  x="1190.39" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.07%)</title><rect x="1185.6" y="485" width="0.9" height="15.0" fill="rgb(229,187,22)" rx="2" ry="2" />
<text  x="1188.64" y="495.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (2 samples, 0.15%)</title><rect x="932.0" y="229" width="1.8" height="15.0" fill="rgb(248,168,45)" rx="2" ry="2" />
<text  x="935.04" y="239.5" ></text>
</g>
<g >
<title>unmap_vmas (2 samples, 0.15%)</title><rect x="1187.4" y="293" width="1.7" height="15.0" fill="rgb(230,176,25)" rx="2" ry="2" />
<text  x="1190.39" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (1 samples, 0.07%)</title><rect x="871.9" y="325" width="0.9" height="15.0" fill="rgb(206,17,35)" rx="2" ry="2" />
<text  x="874.91" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (1 samples, 0.07%)</title><rect x="908.5" y="309" width="0.9" height="15.0" fill="rgb(237,115,51)" rx="2" ry="2" />
<text  x="911.51" y="319.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (2 samples, 0.15%)</title><rect x="932.0" y="261" width="1.8" height="15.0" fill="rgb(241,123,42)" rx="2" ry="2" />
<text  x="935.04" y="271.5" ></text>
</g>
<g >
<title>operator (800 samples, 59.08%)</title><rect x="484.1" y="373" width="697.2" height="15.0" fill="rgb(213,190,11)" rx="2" ry="2" />
<text  x="487.09" y="383.5" >operator</text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.15%)</title><rect x="1187.4" y="357" width="1.7" height="15.0" fill="rgb(232,210,51)" rx="2" ry="2" />
<text  x="1190.39" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::checkInstrs (5 samples, 0.37%)</title><rect x="1181.3" y="357" width="4.3" height="15.0" fill="rgb(249,222,5)" rx="2" ry="2" />
<text  x="1184.29" y="367.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (37 samples, 2.73%)</title><rect x="875.4" y="245" width="32.2" height="15.0" fill="rgb(223,109,43)" rx="2" ry="2" />
<text  x="878.39" y="255.5" >cx..</text>
</g>
<g >
<title>__GI_munmap (1 samples, 0.07%)</title><rect x="24.8" y="213" width="0.9" height="15.0" fill="rgb(225,132,19)" rx="2" ry="2" />
<text  x="27.82" y="223.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.15%)</title><rect x="476.2" y="213" width="1.8" height="15.0" fill="rgb(220,191,15)" rx="2" ry="2" />
<text  x="479.25" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="851.0" y="325" width="0.9" height="15.0" fill="rgb(245,72,51)" rx="2" ry="2" />
<text  x="853.99" y="335.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.07%)</title><rect x="22.2" y="229" width="0.9" height="15.0" fill="rgb(243,31,18)" rx="2" ry="2" />
<text  x="25.20" y="239.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLocalGetOp (304 samples, 22.45%)</title><rect x="556.4" y="357" width="265.0" height="15.0" fill="rgb(221,79,25)" rx="2" ry="2" />
<text  x="559.43" y="367.5" >WasmEdge::Executor::Executor::runLo..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::~_Variant_storage (1 samples, 0.07%)</title><rect x="1186.5" y="341" width="0.9" height="15.0" fill="rgb(238,113,26)" rx="2" ry="2" />
<text  x="1189.51" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::validate (5 samples, 0.37%)</title><rect x="1181.3" y="389" width="4.3" height="15.0" fill="rgb(238,23,1)" rx="2" ry="2" />
<text  x="1184.29" y="399.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_when_equal (1 samples, 0.07%)</title><rect x="1185.6" y="581" width="0.9" height="15.0" fill="rgb(221,27,9)" rx="2" ry="2" />
<text  x="1188.64" y="591.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::getTop (1 samples, 0.07%)</title><rect x="933.8" y="357" width="0.9" height="15.0" fill="rgb(224,111,13)" rx="2" ry="2" />
<text  x="936.78" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;WasmEdge::AST::Instruction*, WasmEdge::AST::Instruction&gt; (1 samples, 0.07%)</title><rect x="1186.5" y="133" width="0.9" height="15.0" fill="rgb(216,120,30)" rx="2" ry="2" />
<text  x="1189.51" y="143.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.15%)</title><rect x="1187.4" y="213" width="1.7" height="15.0" fill="rgb(231,41,14)" rx="2" ry="2" />
<text  x="1190.39" y="223.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (1 samples, 0.07%)</title><rect x="524.2" y="293" width="0.9" height="15.0" fill="rgb(251,53,16)" rx="2" ry="2" />
<text  x="527.18" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::~_Copy_ctor_base (1 samples, 0.07%)</title><rect x="1186.5" y="357" width="0.9" height="15.0" fill="rgb(206,143,24)" rx="2" ry="2" />
<text  x="1189.51" y="367.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (1 samples, 0.07%)</title><rect x="871.9" y="309" width="0.9" height="15.0" fill="rgb(207,37,50)" rx="2" ry="2" />
<text  x="874.91" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::getTop (1 samples, 0.07%)</title><rect x="867.5" y="341" width="0.9" height="15.0" fill="rgb(207,57,3)" rx="2" ry="2" />
<text  x="870.55" y="351.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (1 samples, 0.07%)</title><rect x="10.0" y="645" width="0.9" height="15.0" fill="rgb(244,209,49)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.07%)</title><rect x="1185.6" y="405" width="0.9" height="15.0" fill="rgb(244,174,41)" rx="2" ry="2" />
<text  x="1188.64" y="415.5" ></text>
</g>
<g >
<title>std::shared_lock&lt;std::shared_mutex&gt;::shared_lock (1 samples, 0.07%)</title><rect x="432.7" y="325" width="0.8" height="15.0" fill="rgb(222,10,23)" rx="2" ry="2" />
<text  x="435.67" y="335.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.07%)</title><rect x="22.2" y="165" width="0.9" height="15.0" fill="rgb(229,135,52)" rx="2" ry="2" />
<text  x="25.20" y="175.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (9 samples, 0.66%)</title><rect x="508.5" y="245" width="7.8" height="15.0" fill="rgb(210,48,32)" rx="2" ry="2" />
<text  x="511.49" y="255.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runGtOp&lt;int&gt; (9 samples, 0.66%)</title><rect x="545.1" y="357" width="7.8" height="15.0" fill="rgb(221,54,51)" rx="2" ry="2" />
<text  x="548.10" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="229" width="5.2" height="15.0" fill="rgb(235,184,49)" rx="2" ry="2" />
<text  x="487.09" y="239.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (26 samples, 1.92%)</title><rect x="909.4" y="325" width="22.6" height="15.0" fill="rgb(218,99,29)" rx="2" ry="2" />
<text  x="912.38" y="335.5" >c..</text>
</g>
<g >
<title>WasmEdge::Allocator::release (2 samples, 0.15%)</title><rect x="1187.4" y="437" width="1.7" height="15.0" fill="rgb(249,31,8)" rx="2" ry="2" />
<text  x="1190.39" y="447.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (37 samples, 2.73%)</title><rect x="875.4" y="325" width="32.2" height="15.0" fill="rgb(238,3,51)" rx="2" ry="2" />
<text  x="878.39" y="335.5" >cx..</text>
</g>
<g >
<title>wasmedge (1,353 samples, 99.93%)</title><rect x="10.9" y="709" width="1179.1" height="15.0" fill="rgb(226,54,27)" rx="2" ry="2" />
<text  x="13.87" y="719.5" >wasmedge</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.07%)</title><rect x="871.0" y="261" width="0.9" height="15.0" fill="rgb(209,142,35)" rx="2" ry="2" />
<text  x="874.03" y="271.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runAndOp&lt;unsigned int&gt; (9 samples, 0.66%)</title><rect x="508.5" y="357" width="7.8" height="15.0" fill="rgb(248,206,39)" rx="2" ry="2" />
<text  x="511.49" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runStoreOp&lt;unsigned int, 32u&gt; (5 samples, 0.37%)</title><rect x="476.2" y="357" width="4.4" height="15.0" fill="rgb(215,28,33)" rx="2" ry="2" />
<text  x="479.25" y="367.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (2 samples, 0.15%)</title><rect x="873.6" y="325" width="1.8" height="15.0" fill="rgb(234,47,27)" rx="2" ry="2" />
<text  x="876.65" y="335.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="629" width="1173.9" height="15.0" fill="rgb(206,110,26)" rx="2" ry="2" />
<text  x="14.74" y="639.5" >std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double,..</text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until (1 samples, 0.07%)</title><rect x="1185.6" y="549" width="0.9" height="15.0" fill="rgb(232,229,41)" rx="2" ry="2" />
<text  x="1188.64" y="559.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.07%)</title><rect x="22.2" y="181" width="0.9" height="15.0" fill="rgb(220,229,50)" rx="2" ry="2" />
<text  x="25.20" y="191.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.07%)</title><rect x="1185.6" y="421" width="0.9" height="15.0" fill="rgb(252,160,48)" rx="2" ry="2" />
<text  x="1188.64" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.15%)</title><rect x="1187.4" y="389" width="1.7" height="15.0" fill="rgb(233,221,53)" rx="2" ry="2" />
<text  x="1190.39" y="399.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::checkInstr (1 samples, 0.07%)</title><rect x="1183.0" y="325" width="0.9" height="15.0" fill="rgb(220,205,37)" rx="2" ry="2" />
<text  x="1186.03" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (145 samples, 10.71%)</title><rect x="942.5" y="341" width="126.4" height="15.0" fill="rgb(225,224,6)" rx="2" ry="2" />
<text  x="945.50" y="351.5" >std::vector&lt;Was..</text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (1 samples, 0.07%)</title><rect x="908.5" y="277" width="0.9" height="15.0" fill="rgb(214,104,4)" rx="2" ry="2" />
<text  x="911.51" y="287.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.07%)</title><rect x="1189.1" y="645" width="0.9" height="15.0" fill="rgb(235,126,17)" rx="2" ry="2" />
<text  x="1192.13" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (284 samples, 20.97%)</title><rect x="573.9" y="325" width="247.5" height="15.0" fill="rgb(214,99,26)" rx="2" ry="2" />
<text  x="576.86" y="335.5" >std::vector&lt;WasmEdge::Variant&lt;un..</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::_M_realloc_insert&lt;WasmEdge::OpCode&amp;, unsigned long&amp;&gt; (3 samples, 0.22%)</title><rect x="24.8" y="277" width="2.6" height="15.0" fill="rgb(247,22,43)" rx="2" ry="2" />
<text  x="27.82" y="287.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.07%)</title><rect x="1189.1" y="469" width="0.9" height="15.0" fill="rgb(241,78,0)" rx="2" ry="2" />
<text  x="1192.13" y="479.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::~VM (3 samples, 0.22%)</title><rect x="1186.5" y="645" width="2.6" height="15.0" fill="rgb(254,220,34)" rx="2" ry="2" />
<text  x="1189.51" y="655.5" ></text>
</g>
<g >
<title>__GI_munmap (2 samples, 0.15%)</title><rect x="1187.4" y="405" width="1.7" height="15.0" fill="rgb(234,114,27)" rx="2" ry="2" />
<text  x="1190.39" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="10.0" y="693" width="0.9" height="15.0" fill="rgb(225,174,13)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>perf_lock_task_context (1 samples, 0.07%)</title><rect x="10.0" y="533" width="0.9" height="15.0" fill="rgb(207,42,20)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pop (147 samples, 10.86%)</title><rect x="940.8" y="357" width="128.1" height="15.0" fill="rgb(214,75,47)" rx="2" ry="2" />
<text  x="943.75" y="367.5" >WasmEdge::Runtim..</text>
</g>
<g >
<title>std::_Vector_base&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.07%)</title><rect x="27.4" y="261" width="0.9" height="15.0" fill="rgb(245,10,21)" rx="2" ry="2" />
<text  x="30.43" y="271.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.30%)</title><rect x="1185.6" y="693" width="3.5" height="15.0" fill="rgb(254,96,25)" rx="2" ry="2" />
<text  x="1188.64" y="703.5" ></text>
</g>
<g >
<title>irqentry_exit (1 samples, 0.07%)</title><rect x="26.6" y="133" width="0.8" height="15.0" fill="rgb(239,28,4)" rx="2" ry="2" />
<text  x="29.56" y="143.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction::~WasmFunction (1 samples, 0.07%)</title><rect x="1186.5" y="165" width="0.9" height="15.0" fill="rgb(218,90,28)" rx="2" ry="2" />
<text  x="1189.51" y="175.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runStoreOp&lt;unsigned int, 8u&gt; (4 samples, 0.30%)</title><rect x="480.6" y="357" width="3.5" height="15.0" fill="rgb(251,160,43)" rx="2" ry="2" />
<text  x="483.61" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;WasmEdge::AST::Instruction&gt;::deallocate (1 samples, 0.07%)</title><rect x="24.8" y="229" width="0.9" height="15.0" fill="rgb(254,15,29)" rx="2" ry="2" />
<text  x="27.82" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt;*&gt; (1 samples, 0.07%)</title><rect x="1186.5" y="533" width="0.9" height="15.0" fill="rgb(248,192,41)" rx="2" ry="2" />
<text  x="1189.51" y="543.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (1 samples, 0.07%)</title><rect x="872.8" y="341" width="0.8" height="15.0" fill="rgb(220,163,49)" rx="2" ry="2" />
<text  x="875.78" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (4 samples, 0.30%)</title><rect x="868.4" y="325" width="3.5" height="15.0" fill="rgb(253,196,3)" rx="2" ry="2" />
<text  x="871.42" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (12 samples, 0.89%)</title><rect x="534.6" y="245" width="10.5" height="15.0" fill="rgb(218,146,4)" rx="2" ry="2" />
<text  x="537.64" y="255.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (1 samples, 0.07%)</title><rect x="908.5" y="229" width="0.9" height="15.0" fill="rgb(229,178,3)" rx="2" ry="2" />
<text  x="911.51" y="239.5" ></text>
</g>
<g >
<title>exec_binprm (1 samples, 0.07%)</title><rect x="10.0" y="613" width="0.9" height="15.0" fill="rgb(228,23,40)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (2 samples, 0.15%)</title><rect x="873.6" y="261" width="1.8" height="15.0" fill="rgb(253,128,30)" rx="2" ry="2" />
<text  x="876.65" y="271.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.07%)</title><rect x="1189.1" y="613" width="0.9" height="15.0" fill="rgb(240,178,12)" rx="2" ry="2" />
<text  x="1192.13" y="623.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (1 samples, 0.07%)</title><rect x="908.5" y="341" width="0.9" height="15.0" fill="rgb(213,102,23)" rx="2" ry="2" />
<text  x="911.51" y="351.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.07%)</title><rect x="1189.1" y="581" width="0.9" height="15.0" fill="rgb(245,221,36)" rx="2" ry="2" />
<text  x="1192.13" y="591.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runCallOp (1 samples, 0.07%)</title><rect x="432.7" y="277" width="0.8" height="15.0" fill="rgb(243,171,36)" rx="2" ry="2" />
<text  x="435.67" y="287.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadInstruction (1 samples, 0.07%)</title><rect x="18.7" y="277" width="0.9" height="15.0" fill="rgb(228,57,36)" rx="2" ry="2" />
<text  x="21.71" y="287.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.07%)</title><rect x="871.0" y="197" width="0.9" height="15.0" fill="rgb(206,185,50)" rx="2" ry="2" />
<text  x="874.03" y="207.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::addFunc&lt;WasmEdge::Runtime::Instance::ModuleInstance*, WasmEdge::AST::FunctionType const&amp;, cxx20::span&lt;std::pair&lt;unsigned int, WasmEdge::ValType&gt; const, 18446744073709551615ul&gt;, cxx20::span&lt;WasmEdge::AST::Instruction const, 18446744073709551615ul&gt; &gt; (1 samples, 0.07%)</title><rect x="28.3" y="389" width="0.9" height="15.0" fill="rgb(205,32,33)" rx="2" ry="2" />
<text  x="31.30" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.07%)</title><rect x="26.6" y="165" width="0.8" height="15.0" fill="rgb(226,50,34)" rx="2" ry="2" />
<text  x="29.56" y="175.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrIfOp (177 samples, 13.07%)</title><rect x="231.4" y="341" width="154.2" height="15.0" fill="rgb(208,205,37)" rx="2" ry="2" />
<text  x="234.36" y="351.5" >WasmEdge::Executor:..</text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.07%)</title><rect x="1189.1" y="453" width="0.9" height="15.0" fill="rgb(234,51,44)" rx="2" ry="2" />
<text  x="1192.13" y="463.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.07%)</title><rect x="24.8" y="133" width="0.9" height="15.0" fill="rgb(253,135,15)" rx="2" ry="2" />
<text  x="27.82" y="143.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::~_Copy_assign_base (1 samples, 0.07%)</title><rect x="1186.5" y="389" width="0.9" height="15.0" fill="rgb(246,121,37)" rx="2" ry="2" />
<text  x="1189.51" y="399.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.07%)</title><rect x="1185.6" y="453" width="0.9" height="15.0" fill="rgb(251,125,6)" rx="2" ry="2" />
<text  x="1188.64" y="463.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runOrOp&lt;unsigned int&gt; (2 samples, 0.15%)</title><rect x="873.6" y="357" width="1.8" height="15.0" fill="rgb(212,111,6)" rx="2" ry="2" />
<text  x="876.65" y="367.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (2 samples, 0.15%)</title><rect x="873.6" y="293" width="1.8" height="15.0" fill="rgb(222,44,22)" rx="2" ry="2" />
<text  x="876.65" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (1 samples, 0.07%)</title><rect x="524.2" y="309" width="0.9" height="15.0" fill="rgb(229,201,26)" rx="2" ry="2" />
<text  x="527.18" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::popCtrl (1 samples, 0.07%)</title><rect x="1183.9" y="325" width="0.9" height="15.0" fill="rgb(246,103,44)" rx="2" ry="2" />
<text  x="1186.90" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (1 samples, 0.07%)</title><rect x="908.5" y="245" width="0.9" height="15.0" fill="rgb(253,131,49)" rx="2" ry="2" />
<text  x="911.51" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="1189.1" y="693" width="0.9" height="15.0" fill="rgb(228,45,44)" rx="2" ry="2" />
<text  x="1192.13" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::_M_reset_impl (1 samples, 0.07%)</title><rect x="1186.5" y="309" width="0.9" height="15.0" fill="rgb(233,15,33)" rx="2" ry="2" />
<text  x="1189.51" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::StackTrans (1 samples, 0.07%)</title><rect x="1182.2" y="325" width="0.8" height="15.0" fill="rgb(244,30,46)" rx="2" ry="2" />
<text  x="1185.16" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadInstruction (3 samples, 0.22%)</title><rect x="19.6" y="261" width="2.6" height="15.0" fill="rgb(231,190,11)" rx="2" ry="2" />
<text  x="22.59" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="581" width="1173.9" height="15.0" fill="rgb(245,79,24)" rx="2" ry="2" />
<text  x="14.74" y="591.5" >std::__invoke_impl&lt;void, WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigne..</text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (22 samples, 1.62%)</title><rect x="489.3" y="277" width="19.2" height="15.0" fill="rgb(223,144,25)" rx="2" ry="2" />
<text  x="492.32" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;WasmEdge::Runtime::Instance::FunctionInstance, WasmEdge::Runtime::Instance::ModuleInstance*, WasmEdge::AST::FunctionType const&amp;, cxx20::span&lt;std::pair&lt;unsigned int, WasmEdge::ValType&gt; const, 18446744073709551615ul&gt;, cxx20::span&lt;WasmEdge::AST::Instruction const, 18446744073709551615ul&gt; &gt; (1 samples, 0.07%)</title><rect x="28.3" y="357" width="0.9" height="15.0" fill="rgb(233,218,11)" rx="2" ry="2" />
<text  x="31.30" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrOp (3 samples, 0.22%)</title><rect x="425.7" y="357" width="2.6" height="15.0" fill="rgb(249,152,9)" rx="2" ry="2" />
<text  x="428.70" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::storeValue&lt;unsigned int, 1u&gt; (1 samples, 0.07%)</title><rect x="483.2" y="341" width="0.9" height="15.0" fill="rgb(213,134,11)" rx="2" ry="2" />
<text  x="486.22" y="351.5" ></text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.07%)</title><rect x="24.8" y="149" width="0.9" height="15.0" fill="rgb(230,103,36)" rx="2" ry="2" />
<text  x="27.82" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="933.8" y="325" width="0.9" height="15.0" fill="rgb(241,167,21)" rx="2" ry="2" />
<text  x="936.78" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="277" width="5.2" height="15.0" fill="rgb(251,3,32)" rx="2" ry="2" />
<text  x="487.09" y="287.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::getGlobInstByIdx (2 samples, 0.15%)</title><rect x="457.9" y="341" width="1.8" height="15.0" fill="rgb(223,211,45)" rx="2" ry="2" />
<text  x="460.95" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::construct&lt;WasmEdge::AST::Instruction, WasmEdge::OpCode&amp;, unsigned long&amp;&gt; (2 samples, 0.15%)</title><rect x="23.1" y="277" width="1.7" height="15.0" fill="rgb(211,123,0)" rx="2" ry="2" />
<text  x="26.07" y="287.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.07%)</title><rect x="1189.1" y="565" width="0.9" height="15.0" fill="rgb(252,0,24)" rx="2" ry="2" />
<text  x="1192.13" y="575.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadInstruction (8 samples, 0.59%)</title><rect x="15.2" y="293" width="7.0" height="15.0" fill="rgb(250,71,24)" rx="2" ry="2" />
<text  x="18.23" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::Validator::validate (5 samples, 0.37%)</title><rect x="1181.3" y="437" width="4.3" height="15.0" fill="rgb(240,209,29)" rx="2" ry="2" />
<text  x="1184.29" y="447.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runGlobalSetOp (4 samples, 0.30%)</title><rect x="457.9" y="357" width="3.5" height="15.0" fill="rgb(228,22,20)" rx="2" ry="2" />
<text  x="460.95" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.07%)</title><rect x="10.0" y="677" width="0.9" height="15.0" fill="rgb(221,170,40)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runIfElseOp (13 samples, 0.96%)</title><rect x="461.4" y="357" width="11.4" height="15.0" fill="rgb(237,210,20)" rx="2" ry="2" />
<text  x="464.43" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runFunction (1,322 samples, 97.64%)</title><rect x="29.2" y="405" width="1152.1" height="15.0" fill="rgb(223,50,17)" rx="2" ry="2" />
<text  x="32.17" y="415.5" >WasmEdge::Executor::Executor::runFunction</text>
</g>
<g >
<title>unmap_region (2 samples, 0.15%)</title><rect x="1187.4" y="309" width="1.7" height="15.0" fill="rgb(242,50,37)" rx="2" ry="2" />
<text  x="1190.39" y="319.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (37 samples, 2.73%)</title><rect x="875.4" y="309" width="32.2" height="15.0" fill="rgb(236,118,26)" rx="2" ry="2" />
<text  x="878.39" y="319.5" >cx..</text>
</g>
<g >
<title>handle_mm_fault (5 samples, 0.37%)</title><rect x="476.2" y="261" width="4.4" height="15.0" fill="rgb(214,7,2)" rx="2" ry="2" />
<text  x="479.25" y="271.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.07%)</title><rect x="26.6" y="85" width="0.8" height="15.0" fill="rgb(231,108,35)" rx="2" ry="2" />
<text  x="29.56" y="95.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::~_Variant_base (1 samples, 0.07%)</title><rect x="1186.5" y="421" width="0.9" height="15.0" fill="rgb(210,172,9)" rx="2" ry="2" />
<text  x="1189.51" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::_M_reset (1 samples, 0.07%)</title><rect x="1186.5" y="325" width="0.9" height="15.0" fill="rgb(227,17,14)" rx="2" ry="2" />
<text  x="1189.51" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt; &gt; &gt;::~vector (2 samples, 0.15%)</title><rect x="1187.4" y="565" width="1.7" height="15.0" fill="rgb(218,161,42)" rx="2" ry="2" />
<text  x="1190.39" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;WasmEdge::Runtime::Instance::ModuleInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::ModuleInstance&gt; &gt;::~unique_ptr (3 samples, 0.22%)</title><rect x="1186.5" y="629" width="2.6" height="15.0" fill="rgb(226,60,46)" rx="2" ry="2" />
<text  x="1189.51" y="639.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="213" width="5.2" height="15.0" fill="rgb(225,47,14)" rx="2" ry="2" />
<text  x="487.09" y="223.5" ></text>
</g>
<g >
<title>WasmEdge::FileMgr::readS32 (2 samples, 0.15%)</title><rect x="17.0" y="277" width="1.7" height="15.0" fill="rgb(251,69,36)" rx="2" ry="2" />
<text  x="19.97" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (4 samples, 0.30%)</title><rect x="935.5" y="325" width="3.5" height="15.0" fill="rgb(223,194,30)" rx="2" ry="2" />
<text  x="938.52" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (12 samples, 0.89%)</title><rect x="534.6" y="325" width="10.5" height="15.0" fill="rgb(242,1,9)" rx="2" ry="2" />
<text  x="537.64" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLocalSetOp (35 samples, 2.58%)</title><rect x="821.4" y="357" width="30.5" height="15.0" fill="rgb(244,127,25)" rx="2" ry="2" />
<text  x="824.36" y="367.5" >Wa..</text>
</g>
<g >
<title>perf_event_exec (1 samples, 0.07%)</title><rect x="10.0" y="565" width="0.9" height="15.0" fill="rgb(225,164,0)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runEqOp&lt;unsigned int&gt; (10 samples, 0.74%)</title><rect x="516.3" y="357" width="8.8" height="15.0" fill="rgb(212,190,49)" rx="2" ry="2" />
<text  x="519.34" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="501" width="1173.9" height="15.0" fill="rgb(217,119,42)" rx="2" ry="2" />
<text  x="14.74" y="511.5" >std::__invoke_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsi..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="933.8" y="309" width="0.9" height="15.0" fill="rgb(218,163,30)" rx="2" ry="2" />
<text  x="936.78" y="319.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (2 samples, 0.15%)</title><rect x="932.0" y="277" width="1.8" height="15.0" fill="rgb(249,196,51)" rx="2" ry="2" />
<text  x="935.04" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (2 samples, 0.15%)</title><rect x="459.7" y="293" width="1.7" height="15.0" fill="rgb(208,107,23)" rx="2" ry="2" />
<text  x="462.69" y="303.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test (1 samples, 0.07%)</title><rect x="1185.6" y="565" width="0.9" height="15.0" fill="rgb(249,159,3)" rx="2" ry="2" />
<text  x="1188.64" y="575.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::~ModuleInstance (3 samples, 0.22%)</title><rect x="1186.5" y="597" width="2.6" height="15.0" fill="rgb(240,223,7)" rx="2" ry="2" />
<text  x="1189.51" y="607.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (2 samples, 0.15%)</title><rect x="1187.4" y="245" width="1.7" height="15.0" fill="rgb(224,153,18)" rx="2" ry="2" />
<text  x="1190.39" y="255.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (1 samples, 0.07%)</title><rect x="552.1" y="309" width="0.8" height="15.0" fill="rgb(229,173,45)" rx="2" ry="2" />
<text  x="555.07" y="319.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.07%)</title><rect x="24.8" y="69" width="0.9" height="15.0" fill="rgb(247,100,21)" rx="2" ry="2" />
<text  x="27.82" y="79.5" ></text>
</g>
<g >
<title>WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="551.2" y="341" width="0.9" height="15.0" fill="rgb(247,191,0)" rx="2" ry="2" />
<text  x="554.20" y="351.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="533" width="1173.9" height="15.0" fill="rgb(219,110,37)" rx="2" ry="2" />
<text  x="14.74" y="543.5" >std::__apply_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsig..</text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runSubOp&lt;unsigned int&gt; (26 samples, 1.92%)</title><rect x="909.4" y="357" width="22.6" height="15.0" fill="rgb(244,32,28)" rx="2" ry="2" />
<text  x="912.38" y="367.5" >W..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="613" width="1173.9" height="15.0" fill="rgb(215,39,22)" rx="2" ry="2" />
<text  x="14.74" y="623.5" >std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double,..</text>
</g>
<g >
<title>WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="565" width="1173.9" height="15.0" fill="rgb(210,227,29)" rx="2" ry="2" />
<text  x="14.74" y="575.5" >WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, uns..</text>
</g>
<g >
<title>WasmEdge::FileMgr::readU32 (2 samples, 0.15%)</title><rect x="20.5" y="245" width="1.7" height="15.0" fill="rgb(216,51,15)" rx="2" ry="2" />
<text  x="23.46" y="255.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (12 samples, 0.89%)</title><rect x="534.6" y="309" width="10.5" height="15.0" fill="rgb(217,24,42)" rx="2" ry="2" />
<text  x="537.64" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="551.2" y="325" width="0.9" height="15.0" fill="rgb(216,61,38)" rx="2" ry="2" />
<text  x="554.20" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::checkAccessBound (1 samples, 0.07%)</title><rect x="483.2" y="325" width="0.9" height="15.0" fill="rgb(227,226,32)" rx="2" ry="2" />
<text  x="486.22" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::branchToLabel (176 samples, 13.00%)</title><rect x="232.2" y="309" width="153.4" height="15.0" fill="rgb(214,97,43)" rx="2" ry="2" />
<text  x="235.23" y="319.5" >WasmEdge::Executor:..</text>
</g>
<g >
<title>std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt;::operator (1 samples, 0.07%)</title><rect x="1186.5" y="469" width="0.9" height="15.0" fill="rgb(251,83,38)" rx="2" ry="2" />
<text  x="1189.51" y="479.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::invoke (1,322 samples, 97.64%)</title><rect x="29.2" y="421" width="1152.1" height="15.0" fill="rgb(241,180,15)" rx="2" ry="2" />
<text  x="32.17" y="431.5" >WasmEdge::Executor::Executor::invoke</text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::~_Move_assign_base (1 samples, 0.07%)</title><rect x="1186.5" y="405" width="0.9" height="15.0" fill="rgb(243,227,51)" rx="2" ry="2" />
<text  x="1189.51" y="415.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::unsafeGetMemory (25 samples, 1.85%)</title><rect x="199.1" y="341" width="21.8" height="15.0" fill="rgb(214,138,0)" rx="2" ry="2" />
<text  x="202.11" y="351.5" >W..</text>
</g>
<g >
<title>irqentry_exit (1 samples, 0.07%)</title><rect x="871.0" y="277" width="0.9" height="15.0" fill="rgb(254,0,45)" rx="2" ry="2" />
<text  x="874.03" y="287.5" ></text>
</g>
<g >
<title>std::variant&lt;WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::~variant (1 samples, 0.07%)</title><rect x="1186.5" y="437" width="0.9" height="15.0" fill="rgb(253,41,42)" rx="2" ry="2" />
<text  x="1189.51" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.07%)</title><rect x="10.0" y="661" width="0.9" height="15.0" fill="rgb(225,54,47)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.07%)</title><rect x="27.4" y="245" width="0.9" height="15.0" fill="rgb(221,7,36)" rx="2" ry="2" />
<text  x="30.43" y="255.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::__detail::__variant::_Variant_storage&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::_M_reset_impl (1 samples, 0.07%)</title><rect x="1186.5" y="229" width="0.9" height="15.0" fill="rgb(216,67,47)" rx="2" ry="2" />
<text  x="1189.51" y="239.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="555.6" y="325" width="0.8" height="15.0" fill="rgb(228,37,51)" rx="2" ry="2" />
<text  x="558.55" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (2 samples, 0.15%)</title><rect x="873.6" y="245" width="1.8" height="15.0" fill="rgb(235,206,43)" rx="2" ry="2" />
<text  x="876.65" y="255.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::unsafeExecute (1,322 samples, 97.64%)</title><rect x="29.2" y="437" width="1152.1" height="15.0" fill="rgb(220,164,29)" rx="2" ry="2" />
<text  x="32.17" y="447.5" >WasmEdge::VM::VM::unsafeExecute</text>
</g>
<g >
<title>std::default_delete&lt;WasmEdge::Runtime::Instance::ModuleInstance&gt;::operator (3 samples, 0.22%)</title><rect x="1186.5" y="613" width="2.6" height="15.0" fill="rgb(228,113,0)" rx="2" ry="2" />
<text  x="1189.51" y="623.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (1 samples, 0.07%)</title><rect x="22.2" y="277" width="0.9" height="15.0" fill="rgb(216,211,46)" rx="2" ry="2" />
<text  x="25.20" y="287.5" ></text>
</g>
<g >
<title>__pthread_rwlock_rdlock_full (1 samples, 0.07%)</title><rect x="432.7" y="245" width="0.8" height="15.0" fill="rgb(240,99,38)" rx="2" ry="2" />
<text  x="435.67" y="255.5" ></text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.07%)</title><rect x="26.6" y="53" width="0.8" height="15.0" fill="rgb(218,128,26)" rx="2" ry="2" />
<text  x="29.56" y="63.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="645" width="1173.9" height="15.0" fill="rgb(205,145,47)" rx="2" ry="2" />
<text  x="14.74" y="655.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned l..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="24.8" y="197" width="0.9" height="15.0" fill="rgb(221,168,51)" rx="2" ry="2" />
<text  x="27.82" y="207.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (1 samples, 0.07%)</title><rect x="872.8" y="309" width="0.8" height="15.0" fill="rgb(246,104,19)" rx="2" ry="2" />
<text  x="875.78" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (5 samples, 0.37%)</title><rect x="468.4" y="325" width="4.4" height="15.0" fill="rgb(217,17,11)" rx="2" ry="2" />
<text  x="471.40" y="335.5" ></text>
</g>
<g >
<title>rmqueue_bulk.constprop.0 (2 samples, 0.15%)</title><rect x="476.2" y="149" width="1.8" height="15.0" fill="rgb(243,25,33)" rx="2" ry="2" />
<text  x="479.25" y="159.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (9 samples, 0.66%)</title><rect x="508.5" y="325" width="7.8" height="15.0" fill="rgb(240,150,50)" rx="2" ry="2" />
<text  x="511.49" y="335.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (37 samples, 2.73%)</title><rect x="875.4" y="341" width="32.2" height="15.0" fill="rgb(246,61,17)" rx="2" ry="2" />
<text  x="878.39" y="351.5" >cx..</text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::~MemoryInstance (2 samples, 0.15%)</title><rect x="1187.4" y="453" width="1.7" height="15.0" fill="rgb(251,20,39)" rx="2" ry="2" />
<text  x="1190.39" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt;*, std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt; &gt; (1 samples, 0.07%)</title><rect x="1186.5" y="549" width="0.9" height="15.0" fill="rgb(247,33,53)" rx="2" ry="2" />
<text  x="1189.51" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;true, std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.07%)</title><rect x="1186.5" y="261" width="0.9" height="15.0" fill="rgb(205,107,37)" rx="2" ry="2" />
<text  x="1189.51" y="271.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (1 samples, 0.07%)</title><rect x="524.2" y="261" width="0.9" height="15.0" fill="rgb(231,62,46)" rx="2" ry="2" />
<text  x="527.18" y="271.5" ></text>
</g>
<g >
<title>WasmEdge::AST::Instruction::Instruction (2 samples, 0.15%)</title><rect x="25.7" y="181" width="1.7" height="15.0" fill="rgb(227,137,35)" rx="2" ry="2" />
<text  x="28.69" y="191.5" ></text>
</g>
<g >
<title>WasmEdge::Allocator::release (2 samples, 0.15%)</title><rect x="1187.4" y="421" width="1.7" height="15.0" fill="rgb(253,120,39)" rx="2" ry="2" />
<text  x="1190.39" y="431.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.07%)</title><rect x="10.9" y="645" width="0.8" height="15.0" fill="rgb(223,90,43)" rx="2" ry="2" />
<text  x="13.87" y="655.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (37 samples, 2.73%)</title><rect x="875.4" y="261" width="32.2" height="15.0" fill="rgb(238,34,51)" rx="2" ry="2" />
<text  x="878.39" y="271.5" >cx..</text>
</g>
<g >
<title>std::unique_ptr&lt;WasmEdge::Runtime::Instance::FunctionInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::FunctionInstance&gt; &gt;::~unique_ptr (1 samples, 0.07%)</title><rect x="1186.5" y="485" width="0.9" height="15.0" fill="rgb(206,122,33)" rx="2" ry="2" />
<text  x="1189.51" y="495.5" ></text>
</g>
<g >
<title>perf_pin_task_context (1 samples, 0.07%)</title><rect x="10.0" y="549" width="0.9" height="15.0" fill="rgb(209,9,42)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.07%)</title><rect x="24.8" y="85" width="0.9" height="15.0" fill="rgb(229,49,34)" rx="2" ry="2" />
<text  x="27.82" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="933.8" y="341" width="0.9" height="15.0" fill="rgb(217,200,35)" rx="2" ry="2" />
<text  x="936.78" y="351.5" ></text>
</g>
<g >
<title>schedule_tail (1 samples, 0.07%)</title><rect x="10.9" y="661" width="0.8" height="15.0" fill="rgb(209,163,10)" rx="2" ry="2" />
<text  x="13.87" y="671.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::execute (374 samples, 27.62%)</title><rect x="158.2" y="373" width="325.9" height="15.0" fill="rgb(220,111,33)" rx="2" ry="2" />
<text  x="161.15" y="383.5" >WasmEdge::Executor::Executor::execute</text>
</g>
<g >
<title>pick_next_entity (1 samples, 0.07%)</title><rect x="26.6" y="37" width="0.8" height="15.0" fill="rgb(233,131,26)" rx="2" ry="2" />
<text  x="29.56" y="47.5" ></text>
</g>
<g >
<title>loadSectionContent&lt;WasmEdge::AST::CodeSection, WasmEdge::Loader::Loader::loadSection (19 samples, 1.40%)</title><rect x="11.7" y="405" width="16.6" height="15.0" fill="rgb(231,95,8)" rx="2" ry="2" />
<text  x="14.74" y="415.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (1 samples, 0.07%)</title><rect x="872.8" y="293" width="0.8" height="15.0" fill="rgb(221,192,46)" rx="2" ry="2" />
<text  x="875.78" y="303.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;WasmEdge::AST::Instruction const*, WasmEdge::AST::Instruction*&gt; (2 samples, 0.15%)</title><rect x="25.7" y="229" width="1.7" height="15.0" fill="rgb(246,141,9)" rx="2" ry="2" />
<text  x="28.69" y="239.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (1 samples, 0.07%)</title><rect x="552.1" y="245" width="0.8" height="15.0" fill="rgb(248,106,2)" rx="2" ry="2" />
<text  x="555.07" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt;*&gt; (2 samples, 0.15%)</title><rect x="1187.4" y="517" width="1.7" height="15.0" fill="rgb(215,67,29)" rx="2" ry="2" />
<text  x="1190.39" y="527.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (1 samples, 0.07%)</title><rect x="552.1" y="293" width="0.8" height="15.0" fill="rgb(252,219,17)" rx="2" ry="2" />
<text  x="555.07" y="303.5" ></text>
</g>
<g >
<title>std::__shared_mutex_pthread::lock_shared (1 samples, 0.07%)</title><rect x="432.7" y="293" width="0.8" height="15.0" fill="rgb(218,14,30)" rx="2" ry="2" />
<text  x="435.67" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (22 samples, 1.62%)</title><rect x="489.3" y="245" width="19.2" height="15.0" fill="rgb(218,172,38)" rx="2" ry="2" />
<text  x="492.32" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (5 samples, 0.37%)</title><rect x="476.2" y="245" width="4.4" height="15.0" fill="rgb(239,122,31)" rx="2" ry="2" />
<text  x="479.25" y="255.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::~ModuleInstance (3 samples, 0.22%)</title><rect x="1186.5" y="581" width="2.6" height="15.0" fill="rgb(250,39,20)" rx="2" ry="2" />
<text  x="1189.51" y="591.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.07%)</title><rect x="10.0" y="597" width="0.9" height="15.0" fill="rgb(215,159,14)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt; &gt; (2 samples, 0.15%)</title><rect x="1187.4" y="501" width="1.7" height="15.0" fill="rgb(244,10,38)" rx="2" ry="2" />
<text  x="1190.39" y="511.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_assign_base (2 samples, 0.15%)</title><rect x="932.0" y="309" width="1.8" height="15.0" fill="rgb(241,157,9)" rx="2" ry="2" />
<text  x="935.04" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="867.5" y="309" width="0.9" height="15.0" fill="rgb(207,48,44)" rx="2" ry="2" />
<text  x="870.55" y="319.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.07%)</title><rect x="24.8" y="101" width="0.9" height="15.0" fill="rgb(207,53,44)" rx="2" ry="2" />
<text  x="27.82" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (46 samples, 3.40%)</title><rect x="385.6" y="325" width="40.1" height="15.0" fill="rgb(230,80,14)" rx="2" ry="2" />
<text  x="388.61" y="335.5" >std..</text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (2 samples, 0.15%)</title><rect x="873.6" y="277" width="1.8" height="15.0" fill="rgb(239,27,14)" rx="2" ry="2" />
<text  x="876.65" y="287.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrTableOp (2 samples, 0.15%)</title><rect x="428.3" y="357" width="1.8" height="15.0" fill="rgb(240,76,46)" rx="2" ry="2" />
<text  x="431.32" y="367.5" ></text>
</g>
<g >
<title>unmap_region (1 samples, 0.07%)</title><rect x="24.8" y="117" width="0.9" height="15.0" fill="rgb(217,96,30)" rx="2" ry="2" />
<text  x="27.82" y="127.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.15%)</title><rect x="1187.4" y="261" width="1.7" height="15.0" fill="rgb(250,118,34)" rx="2" ry="2" />
<text  x="1190.39" y="271.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (37 samples, 2.73%)</title><rect x="875.4" y="277" width="32.2" height="15.0" fill="rgb(226,52,14)" rx="2" ry="2" />
<text  x="878.39" y="287.5" >cx..</text>
</g>
<g >
<title>std::__invoke&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1,347 samples, 99.48%)</title><rect x="11.7" y="597" width="1173.9" height="15.0" fill="rgb(243,123,43)" rx="2" ry="2" />
<text  x="14.74" y="607.5" >std::__invoke&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128,..</text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (1 samples, 0.07%)</title><rect x="872.8" y="325" width="0.8" height="15.0" fill="rgb(205,196,22)" rx="2" ry="2" />
<text  x="875.78" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runAddOp&lt;unsigned int&gt; (22 samples, 1.62%)</title><rect x="489.3" y="357" width="19.2" height="15.0" fill="rgb(236,76,9)" rx="2" ry="2" />
<text  x="492.32" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.15%)</title><rect x="1187.4" y="373" width="1.7" height="15.0" fill="rgb(209,30,39)" rx="2" ry="2" />
<text  x="1190.39" y="383.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (22 samples, 1.62%)</title><rect x="489.3" y="261" width="19.2" height="15.0" fill="rgb(218,55,42)" rx="2" ry="2" />
<text  x="492.32" y="271.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadSection (19 samples, 1.40%)</title><rect x="11.7" y="421" width="16.6" height="15.0" fill="rgb(208,2,8)" rx="2" ry="2" />
<text  x="14.74" y="431.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (37 samples, 2.73%)</title><rect x="875.4" y="229" width="32.2" height="15.0" fill="rgb(217,69,53)" rx="2" ry="2" />
<text  x="878.39" y="239.5" >cx..</text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runStoreOp&lt;unsigned int, 32u&gt; (5 samples, 0.37%)</title><rect x="476.2" y="325" width="4.4" height="15.0" fill="rgb(211,229,32)" rx="2" ry="2" />
<text  x="479.25" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runCallOp (4 samples, 0.30%)</title><rect x="430.1" y="357" width="3.4" height="15.0" fill="rgb(235,192,46)" rx="2" ry="2" />
<text  x="433.06" y="367.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (1 samples, 0.07%)</title><rect x="552.1" y="261" width="0.8" height="15.0" fill="rgb(247,192,43)" rx="2" ry="2" />
<text  x="555.07" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::~vector (1 samples, 0.07%)</title><rect x="1186.5" y="149" width="0.9" height="15.0" fill="rgb(245,83,28)" rx="2" ry="2" />
<text  x="1189.51" y="159.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::checkInstr (5 samples, 0.37%)</title><rect x="1181.3" y="341" width="4.3" height="15.0" fill="rgb(251,38,9)" rx="2" ry="2" />
<text  x="1184.29" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLeOp&lt;unsigned int&gt; (2 samples, 0.15%)</title><rect x="554.7" y="357" width="1.7" height="15.0" fill="rgb(218,44,30)" rx="2" ry="2" />
<text  x="557.68" y="367.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (1 samples, 0.07%)</title><rect x="871.9" y="261" width="0.9" height="15.0" fill="rgb(247,46,30)" rx="2" ry="2" />
<text  x="874.91" y="271.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.07%)</title><rect x="22.2" y="197" width="0.9" height="15.0" fill="rgb(246,132,33)" rx="2" ry="2" />
<text  x="25.20" y="207.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (2 samples, 0.15%)</title><rect x="932.0" y="293" width="1.8" height="15.0" fill="rgb(224,155,29)" rx="2" ry="2" />
<text  x="935.04" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unique_ptr&lt;WasmEdge::Runtime::Instance::MemoryInstance, std::default_delete&lt;WasmEdge::Runtime::Instance::MemoryInstance&gt; &gt;*&gt; (2 samples, 0.15%)</title><rect x="1187.4" y="533" width="1.7" height="15.0" fill="rgb(239,138,8)" rx="2" ry="2" />
<text  x="1190.39" y="543.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadOpCode (1 samples, 0.07%)</title><rect x="22.2" y="293" width="0.9" height="15.0" fill="rgb(215,73,36)" rx="2" ry="2" />
<text  x="25.20" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::expected_view_base (26 samples, 1.92%)</title><rect x="909.4" y="245" width="22.6" height="15.0" fill="rgb(234,168,0)" rx="2" ry="2" />
<text  x="912.38" y="255.5" >c..</text>
</g>
<g >
<title>rmqueue (2 samples, 0.15%)</title><rect x="476.2" y="165" width="1.8" height="15.0" fill="rgb(240,183,49)" rx="2" ry="2" />
<text  x="479.25" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.07%)</title><rect x="1185.6" y="469" width="0.9" height="15.0" fill="rgb(228,80,0)" rx="2" ry="2" />
<text  x="1188.64" y="479.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::execute (1,322 samples, 97.64%)</title><rect x="29.2" y="389" width="1152.1" height="15.0" fill="rgb(254,187,18)" rx="2" ry="2" />
<text  x="32.17" y="399.5" >WasmEdge::Executor::Executor::execute</text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (1 samples, 0.07%)</title><rect x="872.8" y="261" width="0.8" height="15.0" fill="rgb(239,207,41)" rx="2" ry="2" />
<text  x="875.78" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;WasmEdge::AST::Instruction, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt;::_M_deallocate (1 samples, 0.07%)</title><rect x="24.8" y="261" width="0.9" height="15.0" fill="rgb(242,180,7)" rx="2" ry="2" />
<text  x="27.82" y="271.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::FunctionInstance::~FunctionInstance (1 samples, 0.07%)</title><rect x="1186.5" y="453" width="0.9" height="15.0" fill="rgb(212,72,53)" rx="2" ry="2" />
<text  x="1189.51" y="463.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::getMemInstByIdx (35 samples, 2.58%)</title><rect x="190.4" y="357" width="30.5" height="15.0" fill="rgb(229,103,18)" rx="2" ry="2" />
<text  x="193.40" y="367.5" >Wa..</text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (1 samples, 0.07%)</title><rect x="872.8" y="277" width="0.8" height="15.0" fill="rgb(224,148,44)" rx="2" ry="2" />
<text  x="875.78" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;WasmEdge::AST::Instruction const*, WasmEdge::AST::Instruction*, WasmEdge::AST::Instruction&gt; (2 samples, 0.15%)</title><rect x="25.7" y="245" width="1.7" height="15.0" fill="rgb(221,209,43)" rx="2" ry="2" />
<text  x="28.69" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (5 samples, 0.37%)</title><rect x="1064.5" y="309" width="4.4" height="15.0" fill="rgb(226,199,54)" rx="2" ry="2" />
<text  x="1067.51" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pop (5 samples, 0.37%)</title><rect x="468.4" y="341" width="4.4" height="15.0" fill="rgb(219,64,30)" rx="2" ry="2" />
<text  x="471.40" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::Validator::validate (5 samples, 0.37%)</title><rect x="1181.3" y="405" width="4.3" height="15.0" fill="rgb(248,55,40)" rx="2" ry="2" />
<text  x="1184.29" y="415.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.07%)</title><rect x="1189.1" y="549" width="0.9" height="15.0" fill="rgb(209,180,52)" rx="2" ry="2" />
<text  x="1192.13" y="559.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::parseModule (19 samples, 1.40%)</title><rect x="11.7" y="453" width="16.6" height="15.0" fill="rgb(227,93,52)" rx="2" ry="2" />
<text  x="14.74" y="463.5" ></text>
</g>
<g >
<title>do_anonymous_page (5 samples, 0.37%)</title><rect x="476.2" y="229" width="4.4" height="15.0" fill="rgb(254,29,25)" rx="2" ry="2" />
<text  x="479.25" y="239.5" ></text>
</g>
<g >
<title>std::shared_future&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="1185.6" y="629" width="0.9" height="15.0" fill="rgb(222,197,44)" rx="2" ry="2" />
<text  x="1188.64" y="639.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrIfOp (235 samples, 17.36%)</title><rect x="220.9" y="357" width="204.8" height="15.0" fill="rgb(235,94,8)" rx="2" ry="2" />
<text  x="223.90" y="367.5" >WasmEdge::Executor::Execut..</text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.07%)</title><rect x="1189.1" y="533" width="0.9" height="15.0" fill="rgb(240,27,52)" rx="2" ry="2" />
<text  x="1192.13" y="543.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="871.0" y="293" width="0.9" height="15.0" fill="rgb(252,74,47)" rx="2" ry="2" />
<text  x="874.03" y="303.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (26 samples, 1.92%)</title><rect x="909.4" y="277" width="22.6" height="15.0" fill="rgb(226,151,19)" rx="2" ry="2" />
<text  x="912.38" y="287.5" >c..</text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (1 samples, 0.07%)</title><rect x="524.2" y="325" width="0.9" height="15.0" fill="rgb(212,168,28)" rx="2" ry="2" />
<text  x="527.18" y="335.5" ></text>
</g>
<g >
<title>main (4 samples, 0.30%)</title><rect x="1185.6" y="661" width="3.5" height="15.0" fill="rgb(235,32,47)" rx="2" ry="2" />
<text  x="1188.64" y="671.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (1 samples, 0.07%)</title><rect x="871.0" y="181" width="0.9" height="15.0" fill="rgb(238,221,54)" rx="2" ry="2" />
<text  x="874.03" y="191.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.07%)</title><rect x="26.6" y="69" width="0.8" height="15.0" fill="rgb(226,136,50)" rx="2" ry="2" />
<text  x="29.56" y="79.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;::_M_reset_impl (1 samples, 0.07%)</title><rect x="1186.5" y="197" width="0.9" height="15.0" fill="rgb(243,36,4)" rx="2" ry="2" />
<text  x="1189.51" y="207.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::getFunc (1 samples, 0.07%)</title><rect x="432.7" y="341" width="0.8" height="15.0" fill="rgb(210,118,24)" rx="2" ry="2" />
<text  x="435.67" y="351.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (26 samples, 1.92%)</title><rect x="909.4" y="341" width="22.6" height="15.0" fill="rgb(208,100,31)" rx="2" ry="2" />
<text  x="912.38" y="351.5" >c..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;true, std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.07%)</title><rect x="1186.5" y="245" width="0.9" height="15.0" fill="rgb(241,82,21)" rx="2" ry="2" />
<text  x="1189.51" y="255.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::checkExpr (5 samples, 0.37%)</title><rect x="1181.3" y="373" width="4.3" height="15.0" fill="rgb(251,16,49)" rx="2" ry="2" />
<text  x="1184.29" y="383.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (5 samples, 0.37%)</title><rect x="476.2" y="309" width="4.4" height="15.0" fill="rgb(254,76,32)" rx="2" ry="2" />
<text  x="479.25" y="319.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (3 samples, 0.22%)</title><rect x="478.0" y="213" width="2.6" height="15.0" fill="rgb(243,79,38)" rx="2" ry="2" />
<text  x="480.99" y="223.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (22 samples, 1.62%)</title><rect x="489.3" y="325" width="19.2" height="15.0" fill="rgb(218,220,32)" rx="2" ry="2" />
<text  x="492.32" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runEqzOp&lt;unsigned int&gt; (23 samples, 1.70%)</title><rect x="525.1" y="357" width="20.0" height="15.0" fill="rgb(216,178,32)" rx="2" ry="2" />
<text  x="528.05" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runReturnOp (4 samples, 0.30%)</title><rect x="472.8" y="357" width="3.4" height="15.0" fill="rgb(217,180,27)" rx="2" ry="2" />
<text  x="475.76" y="367.5" ></text>
</g>
<g >
<title>__GI___pthread_rwlock_rdlock (1 samples, 0.07%)</title><rect x="432.7" y="261" width="0.8" height="15.0" fill="rgb(234,40,13)" rx="2" ry="2" />
<text  x="435.67" y="271.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="871.0" y="309" width="0.9" height="15.0" fill="rgb(226,9,26)" rx="2" ry="2" />
<text  x="874.03" y="319.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.07%)</title><rect x="26.6" y="117" width="0.8" height="15.0" fill="rgb(205,19,44)" rx="2" ry="2" />
<text  x="29.56" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="867.5" y="293" width="0.9" height="15.0" fill="rgb(248,92,7)" rx="2" ry="2" />
<text  x="870.55" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::FileMgr::readU32 (1 samples, 0.07%)</title><rect x="18.7" y="261" width="0.9" height="15.0" fill="rgb(224,59,39)" rx="2" ry="2" />
<text  x="21.71" y="271.5" ></text>
</g>
<g >
<title>operator (19 samples, 1.40%)</title><rect x="11.7" y="389" width="16.6" height="15.0" fill="rgb(235,109,34)" rx="2" ry="2" />
<text  x="14.74" y="399.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.07%)</title><rect x="10.9" y="677" width="0.8" height="15.0" fill="rgb(208,3,42)" rx="2" ry="2" />
<text  x="13.87" y="687.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (22 samples, 1.62%)</title><rect x="489.3" y="341" width="19.2" height="15.0" fill="rgb(216,152,20)" rx="2" ry="2" />
<text  x="492.32" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pop (46 samples, 3.40%)</title><rect x="385.6" y="341" width="40.1" height="15.0" fill="rgb(235,113,29)" rx="2" ry="2" />
<text  x="388.61" y="351.5" >Was..</text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (1 samples, 0.07%)</title><rect x="524.2" y="277" width="0.9" height="15.0" fill="rgb(209,134,19)" rx="2" ry="2" />
<text  x="527.18" y="287.5" ></text>
</g>
<g >
<title>WasmEdge::FileMgr::readS32 (2 samples, 0.15%)</title><rect x="17.0" y="261" width="1.7" height="15.0" fill="rgb(222,205,22)" rx="2" ry="2" />
<text  x="19.97" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.07%)</title><rect x="1189.1" y="677" width="0.9" height="15.0" fill="rgb(241,7,28)" rx="2" ry="2" />
<text  x="1192.13" y="687.5" ></text>
</g>
<g >
<title>operator (19 samples, 1.40%)</title><rect x="11.7" y="357" width="16.6" height="15.0" fill="rgb(223,48,39)" rx="2" ry="2" />
<text  x="14.74" y="367.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.07%)</title><rect x="1189.1" y="485" width="0.9" height="15.0" fill="rgb(226,102,52)" rx="2" ry="2" />
<text  x="1192.13" y="495.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::unsafeRunWasmFile (1,328 samples, 98.08%)</title><rect x="28.3" y="453" width="1157.3" height="15.0" fill="rgb(218,110,27)" rx="2" ry="2" />
<text  x="31.30" y="463.5" >WasmEdge::VM::VM::unsafeRunWasmFile</text>
</g>
<g >
<title>WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="341" width="5.2" height="15.0" fill="rgb(248,132,11)" rx="2" ry="2" />
<text  x="487.09" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadExpression (19 samples, 1.40%)</title><rect x="11.7" y="325" width="16.6" height="15.0" fill="rgb(223,188,29)" rx="2" ry="2" />
<text  x="14.74" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (22 samples, 1.62%)</title><rect x="489.3" y="229" width="19.2" height="15.0" fill="rgb(211,41,28)" rx="2" ry="2" />
<text  x="492.32" y="239.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadSegment (19 samples, 1.40%)</title><rect x="11.7" y="341" width="16.6" height="15.0" fill="rgb(242,14,48)" rx="2" ry="2" />
<text  x="14.74" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (7 samples, 0.52%)</title><rect x="518.1" y="325" width="6.1" height="15.0" fill="rgb(224,131,19)" rx="2" ry="2" />
<text  x="521.08" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_operations_base&lt;void, WasmEdge::ErrCode&gt;::expected_operations_base (9 samples, 0.66%)</title><rect x="508.5" y="261" width="7.8" height="15.0" fill="rgb(238,60,27)" rx="2" ry="2" />
<text  x="511.49" y="271.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (26 samples, 1.92%)</title><rect x="909.4" y="293" width="22.6" height="15.0" fill="rgb(233,207,23)" rx="2" ry="2" />
<text  x="912.38" y="303.5" >c..</text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.07%)</title><rect x="1189.1" y="517" width="0.9" height="15.0" fill="rgb(218,9,15)" rx="2" ry="2" />
<text  x="1192.13" y="527.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::storeValue&lt;unsigned int, 4u&gt; (5 samples, 0.37%)</title><rect x="476.2" y="341" width="4.4" height="15.0" fill="rgb(253,42,38)" rx="2" ry="2" />
<text  x="479.25" y="351.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.07%)</title><rect x="1188.3" y="165" width="0.8" height="15.0" fill="rgb(215,148,31)" rx="2" ry="2" />
<text  x="1191.26" y="175.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runShlOp&lt;unsigned int&gt; (37 samples, 2.73%)</title><rect x="875.4" y="357" width="32.2" height="15.0" fill="rgb(247,123,16)" rx="2" ry="2" />
<text  x="878.39" y="367.5" >Wa..</text>
</g>
<g >
<title>cxx20::detail::expected_copy_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_copy_base (1 samples, 0.07%)</title><rect x="871.9" y="277" width="0.9" height="15.0" fill="rgb(220,198,15)" rx="2" ry="2" />
<text  x="874.91" y="287.5" ></text>
</g>
<g >
<title>loadSectionContentVec&lt;WasmEdge::AST::CodeSection, WasmEdge::Loader::Loader::loadSection (19 samples, 1.40%)</title><rect x="11.7" y="373" width="16.6" height="15.0" fill="rgb(245,11,25)" rx="2" ry="2" />
<text  x="14.74" y="383.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_base (1 samples, 0.07%)</title><rect x="908.5" y="293" width="0.9" height="15.0" fill="rgb(242,165,2)" rx="2" ry="2" />
<text  x="911.51" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLtOp&lt;unsigned int&gt; (1 samples, 0.07%)</title><rect x="871.9" y="357" width="0.9" height="15.0" fill="rgb(205,176,31)" rx="2" ry="2" />
<text  x="874.91" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (5 samples, 0.37%)</title><rect x="1064.5" y="325" width="4.4" height="15.0" fill="rgb(207,183,26)" rx="2" ry="2" />
<text  x="1067.51" y="335.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (1 samples, 0.07%)</title><rect x="552.1" y="229" width="0.8" height="15.0" fill="rgb(233,102,36)" rx="2" ry="2" />
<text  x="555.07" y="239.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pop (2 samples, 0.15%)</title><rect x="459.7" y="341" width="1.7" height="15.0" fill="rgb(230,189,8)" rx="2" ry="2" />
<text  x="462.69" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::FunctionInstance::FunctionInstance (1 samples, 0.07%)</title><rect x="28.3" y="341" width="0.9" height="15.0" fill="rgb(217,205,27)" rx="2" ry="2" />
<text  x="31.30" y="351.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.07%)</title><rect x="26.6" y="101" width="0.8" height="15.0" fill="rgb(250,190,30)" rx="2" ry="2" />
<text  x="29.56" y="111.5" ></text>
</g>
<g >
<title>do_user_addr_fault (5 samples, 0.37%)</title><rect x="476.2" y="277" width="4.4" height="15.0" fill="rgb(236,219,22)" rx="2" ry="2" />
<text  x="479.25" y="287.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (129 samples, 9.53%)</title><rect x="1068.9" y="357" width="112.4" height="15.0" fill="rgb(239,173,26)" rx="2" ry="2" />
<text  x="1071.86" y="367.5" >WasmEdge::Run..</text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadInstrSeq (19 samples, 1.40%)</title><rect x="11.7" y="309" width="16.6" height="15.0" fill="rgb(210,105,33)" rx="2" ry="2" />
<text  x="14.74" y="319.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_storage_base&lt;void, WasmEdge::ErrCode, false, true&gt;::expected_storage_base (9 samples, 0.66%)</title><rect x="508.5" y="229" width="7.8" height="15.0" fill="rgb(242,101,19)" rx="2" ry="2" />
<text  x="511.49" y="239.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::getGlobInstByIdx (26 samples, 1.92%)</title><rect x="434.4" y="341" width="22.7" height="15.0" fill="rgb(227,65,6)" rx="2" ry="2" />
<text  x="437.42" y="351.5" >W..</text>
</g>
<g >
<title>WasmEdge::Validator::FormChecker::pushTypes (1 samples, 0.07%)</title><rect x="1182.2" y="309" width="0.8" height="15.0" fill="rgb(225,173,30)" rx="2" ry="2" />
<text  x="1185.16" y="319.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::expected (2 samples, 0.15%)</title><rect x="873.6" y="341" width="1.8" height="15.0" fill="rgb(206,96,49)" rx="2" ry="2" />
<text  x="876.65" y="351.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.15%)</title><rect x="1187.4" y="325" width="1.7" height="15.0" fill="rgb(238,132,9)" rx="2" ry="2" />
<text  x="1190.39" y="335.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (1 samples, 0.07%)</title><rect x="1185.6" y="597" width="0.9" height="15.0" fill="rgb(239,175,4)" rx="2" ry="2" />
<text  x="1188.64" y="607.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (1 samples, 0.07%)</title><rect x="22.2" y="149" width="0.9" height="15.0" fill="rgb(254,151,19)" rx="2" ry="2" />
<text  x="25.20" y="159.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::maybePopFrame (7 samples, 0.52%)</title><rect x="934.7" y="357" width="6.1" height="15.0" fill="rgb(217,174,34)" rx="2" ry="2" />
<text  x="937.65" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Validator::Validator::validate (5 samples, 0.37%)</title><rect x="1181.3" y="421" width="4.3" height="15.0" fill="rgb(212,202,4)" rx="2" ry="2" />
<text  x="1184.29" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;WasmEdge::AST::Instruction*, WasmEdge::AST::Instruction*, std::allocator&lt;WasmEdge::AST::Instruction&gt; &gt; (2 samples, 0.15%)</title><rect x="25.7" y="261" width="1.7" height="15.0" fill="rgb(252,12,16)" rx="2" ry="2" />
<text  x="28.69" y="271.5" ></text>
</g>
<g >
<title>WasmEdge::VariadicUnion&lt;long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 0.44%)</title><rect x="484.1" y="261" width="5.2" height="15.0" fill="rgb(206,6,10)" rx="2" ry="2" />
<text  x="487.09" y="271.5" ></text>
</g>
<g >
<title>WasmEdge::AST::Instruction::setJumpElse (1 samples, 0.07%)</title><rect x="14.4" y="293" width="0.8" height="15.0" fill="rgb(234,158,12)" rx="2" ry="2" />
<text  x="17.36" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.07%)</title><rect x="457.1" y="341" width="0.8" height="15.0" fill="rgb(221,226,21)" rx="2" ry="2" />
<text  x="460.08" y="351.5" ></text>
</g>
<g >
<title>cxx20::detail::expected_move_assign_base&lt;void, WasmEdge::ErrCode, true&gt;::expected_move_assign_base (2 samples, 0.15%)</title><rect x="932.0" y="325" width="1.8" height="15.0" fill="rgb(218,142,26)" rx="2" ry="2" />
<text  x="935.04" y="335.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::unsafeRunWasmFile (1,347 samples, 99.48%)</title><rect x="11.7" y="469" width="1173.9" height="15.0" fill="rgb(215,10,51)" rx="2" ry="2" />
<text  x="14.74" y="479.5" >WasmEdge::VM::VM::unsafeRunWasmFile</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Frame, std::allocator&lt;WasmEdge::Runtime::StackManager::Frame&gt; &gt;::size (2 samples, 0.15%)</title><rect x="939.0" y="341" width="1.8" height="15.0" fill="rgb(252,43,9)" rx="2" ry="2" />
<text  x="942.01" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::popFrame (5 samples, 0.37%)</title><rect x="934.7" y="341" width="4.3" height="15.0" fill="rgb(238,48,17)" rx="2" ry="2" />
<text  x="937.65" y="351.5" ></text>
</g>
</g>
</svg>
